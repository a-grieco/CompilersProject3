// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  HPERSIMMON
// DateTime: 6/2/2017 11:22:39 PM
// UserName: amgrieco
// Input file <TCCL.grammar.y - 6/2/2017 11:22:38 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using Project4;

namespace ASTBuilder
{
public enum Token {error=2,EOF=3,STATIC=4,STRUCT=5,QUESTION=6,
    RSLASH=7,MINUSOP=8,NULL=9,INT=10,OP_EQ=11,OP_LT=12,
    COLON=13,OP_LOR=14,ELSE=15,PERCENT=16,THIS=17,CLASS=18,
    PIPE=19,PUBLIC=20,PERIOD=21,HAT=22,COMMA=23,VOID=24,
    TILDE=25,STRING=26,LPAREN=27,RPAREN=28,OP_GE=29,SEMICOLON=30,
    IF=31,NEW=32,WHILE=33,PRIVATE=34,BANG=35,OP_LE=36,
    AND=37,LBRACE=38,RBRACE=39,LBRACKET=40,RBRACKET=41,BOOLEAN=42,
    INSTANCEOF=43,ASTERISK=44,EQUALS=45,PLUSOP=46,RETURN=47,OP_GT=48,
    OP_NE=49,OP_LAND=50,INT_NUMBER=51,IDENTIFIER=52,LITERAL=53,SUPER=54,
    UNARY=55};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<AbstractNode,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public AbstractNode yylval;
  public LexLocation yylloc;
  public ScanObj( int t, AbstractNode val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public partial class TCCLParser: ShiftReduceParser<AbstractNode, LexLocation>
{
  // Verbatim content from TCCL.grammar.y - 6/2/2017 11:22:38 PM
  // End verbatim content from TCCL.grammar.y - 6/2/2017 11:22:38 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[113];
  private static State[] states = new State[177];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "$accept", "ClassDeclaration", "Modifiers", "Identifier", 
      "ClassBody", "FieldDeclarations", "FieldDeclaration", "FieldVariableDeclaration", 
      "MethodDeclaration", "ConstructorDeclaration", "StaticInitializer", "StructDeclaration", 
      "TypeSpecifier", "FieldVariableDeclarators", "TypeName", "ArraySpecifier", 
      "PrimitiveType", "QualifiedName", "FieldVariableDeclaratorName", "MethodDeclarator", 
      "MethodBody", "MethodDeclaratorName", "ParameterList", "Parameter", "DeclaratorName", 
      "LocalVariableDeclaratorName", "Block", "LocalVariableDeclarationsAndStatements", 
      "LocalVariableDeclarationOrStatement", "LocalVariableDeclarationStatement", 
      "Statement", "LocalVariableDeclarators", "EmptyStatement", "ExpressionStatement", 
      "SelectionStatement", "IterationStatement", "ReturnStatement", "Expression", 
      "ArgumentList", "ArithmeticUnaryOperator", "PrimaryExpression", "NotJustName", 
      "SpecialName", "ComplexPrimary", "ComplexPrimaryNoParenthesis", "Number", 
      "FieldAccess", "MethodCall", "MethodReference", };

  static TCCLParser() {
    states[0] = new State(new int[]{20,121,34,122,4,123},new int[]{-1,1,-3,3,-4,4});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{18,5,20,118,34,119,4,120});
    states[5] = new State(new int[]{52,20},new int[]{-5,6});
    states[6] = new State(new int[]{38,8},new int[]{-6,7});
    states[7] = new State(-3);
    states[8] = new State(new int[]{39,175,20,121,34,122,4,169},new int[]{-7,9,-8,176,-9,12,-4,14,-10,171,-11,172,-12,173,-13,174});
    states[9] = new State(new int[]{39,10,20,121,34,122,4,169},new int[]{-8,11,-9,12,-4,14,-10,171,-11,172,-12,173,-13,174});
    states[10] = new State(-10);
    states[11] = new State(-13);
    states[12] = new State(new int[]{30,13});
    states[13] = new State(-14);
    states[14] = new State(new int[]{20,118,34,119,4,120,5,115,42,40,10,41,26,42,24,43,52,20},new int[]{-14,15,-21,166,-16,36,-18,39,-19,163,-5,168,-17,112,-23,154});
    states[15] = new State(new int[]{52,20},new int[]{-15,16,-21,21,-20,152,-5,153,-23,154});
    states[16] = new State(new int[]{23,17,30,-20});
    states[17] = new State(new int[]{52,20},new int[]{-20,18,-5,19});
    states[18] = new State(-31);
    states[19] = new State(-42);
    states[20] = new State(-111);
    states[21] = new State(new int[]{38,24},new int[]{-22,22,-28,23});
    states[22] = new State(-32);
    states[23] = new State(-44);
    states[24] = new State(new int[]{39,150,42,40,10,41,26,42,24,43,52,20,20,121,34,122,4,123,30,126,46,85,8,86,17,92,9,93,27,95,53,99,51,101,31,131,33,139,47,145,38,24},new int[]{-29,25,-30,151,-31,28,-14,29,-16,36,-18,39,-19,44,-5,82,-17,112,-13,113,-4,114,-32,124,-34,125,-35,127,-39,129,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104,-36,130,-37,138,-38,144,-28,149});
    states[25] = new State(new int[]{39,26,42,40,10,41,26,42,24,43,52,20,20,121,34,122,4,123,30,126,46,85,8,86,17,92,9,93,27,95,53,99,51,101,31,131,33,139,47,145,38,24},new int[]{-30,27,-31,28,-14,29,-16,36,-18,39,-19,44,-5,82,-17,112,-13,113,-4,114,-32,124,-34,125,-35,127,-39,129,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104,-36,130,-37,138,-38,144,-28,149});
    states[26] = new State(-47);
    states[27] = new State(-50);
    states[28] = new State(-51);
    states[29] = new State(new int[]{52,20},new int[]{-33,30,-27,35,-5,34});
    states[30] = new State(new int[]{30,31,23,32});
    states[31] = new State(-53);
    states[32] = new State(new int[]{52,20},new int[]{-27,33,-5,34});
    states[33] = new State(-56);
    states[34] = new State(-43);
    states[35] = new State(-55);
    states[36] = new State(new int[]{40,37,52,-21});
    states[37] = new State(new int[]{41,38});
    states[38] = new State(-25);
    states[39] = new State(-23);
    states[40] = new State(-26);
    states[41] = new State(-27);
    states[42] = new State(-28);
    states[43] = new State(-29);
    states[44] = new State(new int[]{21,45,45,47,40,-24,52,-24,14,-93,50,-93,19,-93,22,-93,37,-93,11,-93,49,-93,48,-93,12,-93,36,-93,29,-93,46,-93,8,-93,44,-93,7,-93,16,-93,30,-93,27,-107});
    states[45] = new State(new int[]{52,20},new int[]{-5,46});
    states[46] = new State(-39);
    states[47] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,48,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[48] = new State(new int[]{14,49,50,51,19,53,22,55,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79,30,-72,28,-72,23,-72});
    states[49] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,50,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[50] = new State(new int[]{14,-73,50,51,19,53,22,55,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79,30,-73,28,-73,23,-73});
    states[51] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,52,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[52] = new State(new int[]{14,-74,50,-74,19,53,22,55,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79,30,-74,28,-74,23,-74});
    states[53] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,54,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[54] = new State(new int[]{14,-75,50,-75,19,-75,22,55,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79,30,-75,28,-75,23,-75});
    states[55] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,56,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[56] = new State(new int[]{14,-76,50,-76,19,-76,22,-76,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79,30,-76,28,-76,23,-76});
    states[57] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,58,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[58] = new State(new int[]{14,-77,50,-77,19,-77,22,-77,37,-77,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79,30,-77,28,-77,23,-77});
    states[59] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,60,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[60] = new State(new int[]{14,-78,50,-78,19,-78,22,-78,37,-78,11,-78,49,-78,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79,30,-78,28,-78,23,-78});
    states[61] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,62,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[62] = new State(new int[]{14,-79,50,-79,19,-79,22,-79,37,-79,11,-79,49,-79,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79,30,-79,28,-79,23,-79});
    states[63] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,64,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[64] = new State(new int[]{14,-80,50,-80,19,-80,22,-80,37,-80,11,-80,49,-80,48,-80,12,-80,36,-80,29,-80,46,71,8,73,44,75,7,77,16,79,30,-80,28,-80,23,-80});
    states[65] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,66,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[66] = new State(new int[]{14,-81,50,-81,19,-81,22,-81,37,-81,11,-81,49,-81,48,-81,12,-81,36,-81,29,-81,46,71,8,73,44,75,7,77,16,79,30,-81,28,-81,23,-81});
    states[67] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,68,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[68] = new State(new int[]{14,-82,50,-82,19,-82,22,-82,37,-82,11,-82,49,-82,48,-82,12,-82,36,-82,29,-82,46,71,8,73,44,75,7,77,16,79,30,-82,28,-82,23,-82});
    states[69] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,70,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[70] = new State(new int[]{14,-83,50,-83,19,-83,22,-83,37,-83,11,-83,49,-83,48,-83,12,-83,36,-83,29,-83,46,71,8,73,44,75,7,77,16,79,30,-83,28,-83,23,-83});
    states[71] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,72,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[72] = new State(new int[]{14,-84,50,-84,19,-84,22,-84,37,-84,11,-84,49,-84,48,-84,12,-84,36,-84,29,-84,46,-84,8,-84,44,75,7,77,16,79,30,-84,28,-84,23,-84});
    states[73] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,74,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[74] = new State(new int[]{14,-85,50,-85,19,-85,22,-85,37,-85,11,-85,49,-85,48,-85,12,-85,36,-85,29,-85,46,-85,8,-85,44,75,7,77,16,79,30,-85,28,-85,23,-85});
    states[75] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,76,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[76] = new State(-86);
    states[77] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,78,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[78] = new State(-87);
    states[79] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,80,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[80] = new State(-88);
    states[81] = new State(new int[]{45,47,21,45,14,-93,50,-93,19,-93,22,-93,37,-93,11,-93,49,-93,48,-93,12,-93,36,-93,29,-93,46,-93,8,-93,44,-93,7,-93,16,-93,30,-93,28,-93,23,-93,27,-107});
    states[82] = new State(-38);
    states[83] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,84,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[84] = new State(-89);
    states[85] = new State(-91);
    states[86] = new State(-92);
    states[87] = new State(-90);
    states[88] = new State(new int[]{21,89,14,-94,50,-94,19,-94,22,-94,37,-94,11,-94,49,-94,48,-94,12,-94,36,-94,29,-94,46,-94,8,-94,44,-94,7,-94,16,-94,30,-94,28,-94,23,-94});
    states[89] = new State(new int[]{52,20},new int[]{-5,90});
    states[90] = new State(-103);
    states[91] = new State(new int[]{21,-95,14,-95,50,-95,19,-95,22,-95,37,-95,11,-95,49,-95,48,-95,12,-95,36,-95,29,-95,46,-95,8,-95,44,-95,7,-95,16,-95,30,-95,28,-95,23,-95,27,-108});
    states[92] = new State(-109);
    states[93] = new State(-110);
    states[94] = new State(-96);
    states[95] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,96,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[96] = new State(new int[]{28,97,14,49,50,51,19,53,22,55,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79});
    states[97] = new State(-97);
    states[98] = new State(new int[]{21,-98,14,-98,50,-98,19,-98,22,-98,37,-98,11,-98,49,-98,48,-98,12,-98,36,-98,29,-98,46,-98,8,-98,44,-98,7,-98,16,-98,30,-98,28,-98,23,-98,27,-106});
    states[99] = new State(-99);
    states[100] = new State(-100);
    states[101] = new State(-112);
    states[102] = new State(-101);
    states[103] = new State(-102);
    states[104] = new State(new int[]{27,105});
    states[105] = new State(new int[]{28,110,52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-40,106,-39,111,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[106] = new State(new int[]{28,107,23,108});
    states[107] = new State(-104);
    states[108] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,109,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[109] = new State(new int[]{14,49,50,51,19,53,22,55,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79,28,-71,23,-71});
    states[110] = new State(-105);
    states[111] = new State(new int[]{14,49,50,51,19,53,22,55,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79,28,-70,23,-70});
    states[112] = new State(-22);
    states[113] = new State(-54);
    states[114] = new State(new int[]{5,115,20,118,34,119,4,120});
    states[115] = new State(new int[]{52,20},new int[]{-5,116});
    states[116] = new State(new int[]{38,8},new int[]{-6,117});
    states[117] = new State(-19);
    states[118] = new State(-7);
    states[119] = new State(-8);
    states[120] = new State(-9);
    states[121] = new State(-4);
    states[122] = new State(-5);
    states[123] = new State(-6);
    states[124] = new State(-52);
    states[125] = new State(-57);
    states[126] = new State(-63);
    states[127] = new State(new int[]{30,128});
    states[128] = new State(-58);
    states[129] = new State(new int[]{14,49,50,51,19,53,22,55,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79,30,-64});
    states[130] = new State(-59);
    states[131] = new State(new int[]{27,132});
    states[132] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,133,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[133] = new State(new int[]{28,134,14,49,50,51,19,53,22,55,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79});
    states[134] = new State(new int[]{30,126,52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101,31,131,33,139,47,145,38,24},new int[]{-32,135,-34,125,-35,127,-39,129,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104,-36,130,-37,138,-38,144,-28,149});
    states[135] = new State(new int[]{15,136,39,-66,42,-66,10,-66,26,-66,24,-66,52,-66,20,-66,34,-66,4,-66,30,-66,46,-66,8,-66,17,-66,9,-66,27,-66,53,-66,51,-66,31,-66,33,-66,47,-66,38,-66});
    states[136] = new State(new int[]{30,126,52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101,31,131,33,139,47,145,38,24},new int[]{-32,137,-34,125,-35,127,-39,129,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104,-36,130,-37,138,-38,144,-28,149});
    states[137] = new State(-65);
    states[138] = new State(-60);
    states[139] = new State(new int[]{27,140});
    states[140] = new State(new int[]{52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,141,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[141] = new State(new int[]{28,142,14,49,50,51,19,53,22,55,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79});
    states[142] = new State(new int[]{30,126,52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101,31,131,33,139,47,145,38,24},new int[]{-32,143,-34,125,-35,127,-39,129,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104,-36,130,-37,138,-38,144,-28,149});
    states[143] = new State(-67);
    states[144] = new State(-61);
    states[145] = new State(new int[]{30,148,52,20,46,85,8,86,17,92,9,93,27,95,53,99,51,101},new int[]{-39,146,-19,81,-5,82,-41,83,-42,87,-43,88,-44,91,-45,94,-46,98,-47,100,-48,102,-49,103,-50,104});
    states[146] = new State(new int[]{30,147,14,49,50,51,19,53,22,55,37,57,11,59,49,61,48,63,12,65,36,67,29,69,46,71,8,73,44,75,7,77,16,79});
    states[147] = new State(-68);
    states[148] = new State(-69);
    states[149] = new State(-62);
    states[150] = new State(-48);
    states[151] = new State(-49);
    states[152] = new State(-30);
    states[153] = new State(new int[]{23,-42,30,-42,27,-41});
    states[154] = new State(new int[]{27,155});
    states[155] = new State(new int[]{28,164,42,40,10,41,26,42,24,43,52,20},new int[]{-24,156,-25,165,-14,160,-16,36,-18,39,-19,163,-5,82,-17,112});
    states[156] = new State(new int[]{28,157,23,158});
    states[157] = new State(-33);
    states[158] = new State(new int[]{42,40,10,41,26,42,24,43,52,20},new int[]{-25,159,-14,160,-16,36,-18,39,-19,163,-5,82,-17,112});
    states[159] = new State(-36);
    states[160] = new State(new int[]{52,20},new int[]{-26,161,-5,162});
    states[161] = new State(-37);
    states[162] = new State(-40);
    states[163] = new State(new int[]{21,45,40,-24,52,-24});
    states[164] = new State(-34);
    states[165] = new State(-35);
    states[166] = new State(new int[]{38,24},new int[]{-28,167});
    states[167] = new State(-45);
    states[168] = new State(new int[]{21,-38,40,-38,52,-38,27,-41});
    states[169] = new State(new int[]{38,24,20,-6,34,-6,4,-6,5,-6,42,-6,10,-6,26,-6,24,-6,52,-6},new int[]{-28,170});
    states[170] = new State(-46);
    states[171] = new State(-15);
    states[172] = new State(-16);
    states[173] = new State(-17);
    states[174] = new State(-18);
    states[175] = new State(-11);
    states[176] = new State(-12);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4,18,-5,-6});
    rules[4] = new Rule(-4, new int[]{20});
    rules[5] = new Rule(-4, new int[]{34});
    rules[6] = new Rule(-4, new int[]{4});
    rules[7] = new Rule(-4, new int[]{-4,20});
    rules[8] = new Rule(-4, new int[]{-4,34});
    rules[9] = new Rule(-4, new int[]{-4,4});
    rules[10] = new Rule(-6, new int[]{38,-7,39});
    rules[11] = new Rule(-6, new int[]{38,39});
    rules[12] = new Rule(-7, new int[]{-8});
    rules[13] = new Rule(-7, new int[]{-7,-8});
    rules[14] = new Rule(-8, new int[]{-9,30});
    rules[15] = new Rule(-8, new int[]{-10});
    rules[16] = new Rule(-8, new int[]{-11});
    rules[17] = new Rule(-8, new int[]{-12});
    rules[18] = new Rule(-8, new int[]{-13});
    rules[19] = new Rule(-13, new int[]{-4,5,-5,-6});
    rules[20] = new Rule(-9, new int[]{-4,-14,-15});
    rules[21] = new Rule(-14, new int[]{-16});
    rules[22] = new Rule(-14, new int[]{-17});
    rules[23] = new Rule(-16, new int[]{-18});
    rules[24] = new Rule(-16, new int[]{-19});
    rules[25] = new Rule(-17, new int[]{-16,40,41});
    rules[26] = new Rule(-18, new int[]{42});
    rules[27] = new Rule(-18, new int[]{10});
    rules[28] = new Rule(-18, new int[]{26});
    rules[29] = new Rule(-18, new int[]{24});
    rules[30] = new Rule(-15, new int[]{-20});
    rules[31] = new Rule(-15, new int[]{-15,23,-20});
    rules[32] = new Rule(-10, new int[]{-4,-14,-21,-22});
    rules[33] = new Rule(-21, new int[]{-23,27,-24,28});
    rules[34] = new Rule(-21, new int[]{-23,27,28});
    rules[35] = new Rule(-24, new int[]{-25});
    rules[36] = new Rule(-24, new int[]{-24,23,-25});
    rules[37] = new Rule(-25, new int[]{-14,-26});
    rules[38] = new Rule(-19, new int[]{-5});
    rules[39] = new Rule(-19, new int[]{-19,21,-5});
    rules[40] = new Rule(-26, new int[]{-5});
    rules[41] = new Rule(-23, new int[]{-5});
    rules[42] = new Rule(-20, new int[]{-5});
    rules[43] = new Rule(-27, new int[]{-5});
    rules[44] = new Rule(-22, new int[]{-28});
    rules[45] = new Rule(-11, new int[]{-4,-21,-28});
    rules[46] = new Rule(-12, new int[]{4,-28});
    rules[47] = new Rule(-28, new int[]{38,-29,39});
    rules[48] = new Rule(-28, new int[]{38,39});
    rules[49] = new Rule(-29, new int[]{-30});
    rules[50] = new Rule(-29, new int[]{-29,-30});
    rules[51] = new Rule(-30, new int[]{-31});
    rules[52] = new Rule(-30, new int[]{-32});
    rules[53] = new Rule(-31, new int[]{-14,-33,30});
    rules[54] = new Rule(-31, new int[]{-13});
    rules[55] = new Rule(-33, new int[]{-27});
    rules[56] = new Rule(-33, new int[]{-33,23,-27});
    rules[57] = new Rule(-32, new int[]{-34});
    rules[58] = new Rule(-32, new int[]{-35,30});
    rules[59] = new Rule(-32, new int[]{-36});
    rules[60] = new Rule(-32, new int[]{-37});
    rules[61] = new Rule(-32, new int[]{-38});
    rules[62] = new Rule(-32, new int[]{-28});
    rules[63] = new Rule(-34, new int[]{30});
    rules[64] = new Rule(-35, new int[]{-39});
    rules[65] = new Rule(-36, new int[]{31,27,-39,28,-32,15,-32});
    rules[66] = new Rule(-36, new int[]{31,27,-39,28,-32});
    rules[67] = new Rule(-37, new int[]{33,27,-39,28,-32});
    rules[68] = new Rule(-38, new int[]{47,-39,30});
    rules[69] = new Rule(-38, new int[]{47,30});
    rules[70] = new Rule(-40, new int[]{-39});
    rules[71] = new Rule(-40, new int[]{-40,23,-39});
    rules[72] = new Rule(-39, new int[]{-19,45,-39});
    rules[73] = new Rule(-39, new int[]{-39,14,-39});
    rules[74] = new Rule(-39, new int[]{-39,50,-39});
    rules[75] = new Rule(-39, new int[]{-39,19,-39});
    rules[76] = new Rule(-39, new int[]{-39,22,-39});
    rules[77] = new Rule(-39, new int[]{-39,37,-39});
    rules[78] = new Rule(-39, new int[]{-39,11,-39});
    rules[79] = new Rule(-39, new int[]{-39,49,-39});
    rules[80] = new Rule(-39, new int[]{-39,48,-39});
    rules[81] = new Rule(-39, new int[]{-39,12,-39});
    rules[82] = new Rule(-39, new int[]{-39,36,-39});
    rules[83] = new Rule(-39, new int[]{-39,29,-39});
    rules[84] = new Rule(-39, new int[]{-39,46,-39});
    rules[85] = new Rule(-39, new int[]{-39,8,-39});
    rules[86] = new Rule(-39, new int[]{-39,44,-39});
    rules[87] = new Rule(-39, new int[]{-39,7,-39});
    rules[88] = new Rule(-39, new int[]{-39,16,-39});
    rules[89] = new Rule(-39, new int[]{-41,-39});
    rules[90] = new Rule(-39, new int[]{-42});
    rules[91] = new Rule(-41, new int[]{46});
    rules[92] = new Rule(-41, new int[]{8});
    rules[93] = new Rule(-42, new int[]{-19});
    rules[94] = new Rule(-42, new int[]{-43});
    rules[95] = new Rule(-43, new int[]{-44});
    rules[96] = new Rule(-43, new int[]{-45});
    rules[97] = new Rule(-45, new int[]{27,-39,28});
    rules[98] = new Rule(-45, new int[]{-46});
    rules[99] = new Rule(-46, new int[]{53});
    rules[100] = new Rule(-46, new int[]{-47});
    rules[101] = new Rule(-46, new int[]{-48});
    rules[102] = new Rule(-46, new int[]{-49});
    rules[103] = new Rule(-48, new int[]{-43,21,-5});
    rules[104] = new Rule(-49, new int[]{-50,27,-40,28});
    rules[105] = new Rule(-49, new int[]{-50,27,28});
    rules[106] = new Rule(-50, new int[]{-46});
    rules[107] = new Rule(-50, new int[]{-19});
    rules[108] = new Rule(-50, new int[]{-44});
    rules[109] = new Rule(-44, new int[]{17});
    rules[110] = new Rule(-44, new int[]{9});
    rules[111] = new Rule(-5, new int[]{52});
    rules[112] = new Rule(-47, new int[]{51});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // CompilationUnit -> ClassDeclaration
{ CurrentSemanticValue = new CompilationUnit(ValueStack[ValueStack.Depth-1]); }
        break;
      case 3: // ClassDeclaration -> Modifiers, CLASS, Identifier, ClassBody
{ CurrentSemanticValue = new ClassDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 4: // Modifiers -> PUBLIC
{ CurrentSemanticValue = new Modifiers(ModifiersEnums.PUBLIC); }
        break;
      case 5: // Modifiers -> PRIVATE
{ CurrentSemanticValue = new Modifiers(ModifiersEnums.PRIVATE); }
        break;
      case 6: // Modifiers -> STATIC
{ CurrentSemanticValue = new Modifiers(ModifiersEnums.STATIC); }
        break;
      case 7: // Modifiers -> Modifiers, PUBLIC
{ ((Modifiers)ValueStack[ValueStack.Depth-2]).AddModifier(ModifiersEnums.PUBLIC); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 8: // Modifiers -> Modifiers, PRIVATE
{ ((Modifiers)ValueStack[ValueStack.Depth-2]).AddModifier(ModifiersEnums.PRIVATE); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 9: // Modifiers -> Modifiers, STATIC
{ ((Modifiers)ValueStack[ValueStack.Depth-2]).AddModifier(ModifiersEnums.STATIC); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 10: // ClassBody -> LBRACE, FieldDeclarations, RBRACE
{ CurrentSemanticValue = new ClassBody(ValueStack[ValueStack.Depth-2]); }
        break;
      case 11: // ClassBody -> LBRACE, RBRACE
{ CurrentSemanticValue = new ClassBody(); }
        break;
      case 12: // FieldDeclarations -> FieldDeclaration
{ CurrentSemanticValue = new FieldDeclarations(ValueStack[ValueStack.Depth-1]); }
        break;
      case 13: // FieldDeclarations -> FieldDeclarations, FieldDeclaration
{ ((FieldDeclarations)ValueStack[ValueStack.Depth-2]).AddFieldDeclaration(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 14: // FieldDeclaration -> FieldVariableDeclaration, SEMICOLON
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 15: // FieldDeclaration -> MethodDeclaration
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 16: // FieldDeclaration -> ConstructorDeclaration
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 17: // FieldDeclaration -> StaticInitializer
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 18: // FieldDeclaration -> StructDeclaration
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 19: // StructDeclaration -> Modifiers, STRUCT, Identifier, ClassBody
{ CurrentSemanticValue = new StructDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 20: // FieldVariableDeclaration -> Modifiers, TypeSpecifier, FieldVariableDeclarators
{ CurrentSemanticValue = new FieldVariableDeclaration(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 21: // TypeSpecifier -> TypeName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 22: // TypeSpecifier -> ArraySpecifier
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 23: // TypeName -> PrimitiveType
{ CurrentSemanticValue = new TypeSpecifier(ValueStack[ValueStack.Depth-1]); }
        break;
      case 24: // TypeName -> QualifiedName
{ CurrentSemanticValue = new TypeSpecifier(ValueStack[ValueStack.Depth-1]); }
        break;
      case 25: // ArraySpecifier -> TypeName, LBRACKET, RBRACKET
{ CurrentSemanticValue = new ArraySpecifier(ValueStack[ValueStack.Depth-3]); }
        break;
      case 26: // PrimitiveType -> BOOLEAN
{ CurrentSemanticValue = new PrimitiveTypeBoolean(); }
        break;
      case 27: // PrimitiveType -> INT
{ CurrentSemanticValue = new PrimitiveTypeInt(); }
        break;
      case 28: // PrimitiveType -> STRING
{ CurrentSemanticValue = new PrimitiveTypeString(); }
        break;
      case 29: // PrimitiveType -> VOID
{ CurrentSemanticValue = new PrimitiveTypeVoid(); }
        break;
      case 30: // FieldVariableDeclarators -> FieldVariableDeclaratorName
{ CurrentSemanticValue = new FieldVariableDeclarators(ValueStack[ValueStack.Depth-1]); }
        break;
      case 31: // FieldVariableDeclarators -> FieldVariableDeclarators, COMMA, 
               //                             FieldVariableDeclaratorName
{ ((FieldVariableDeclarators)ValueStack[ValueStack.Depth-3]).AddFieldVariableDeclaratorName(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 32: // MethodDeclaration -> Modifiers, TypeSpecifier, MethodDeclarator, MethodBody
{ CurrentSemanticValue = new MethodDeclaration(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 33: // MethodDeclarator -> MethodDeclaratorName, LPAREN, ParameterList, RPAREN
{ CurrentSemanticValue = new MethodDeclarator(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 34: // MethodDeclarator -> MethodDeclaratorName, LPAREN, RPAREN
{ CurrentSemanticValue = new MethodDeclarator(ValueStack[ValueStack.Depth-3]); }
        break;
      case 35: // ParameterList -> Parameter
{ CurrentSemanticValue = new ParameterList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 36: // ParameterList -> ParameterList, COMMA, Parameter
{ ((ParameterList)ValueStack[ValueStack.Depth-3]).AddParameter(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 37: // Parameter -> TypeSpecifier, DeclaratorName
{ CurrentSemanticValue = new Parameter(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 38: // QualifiedName -> Identifier
{ CurrentSemanticValue = new QualifiedName(ValueStack[ValueStack.Depth-1]); }
        break;
      case 39: // QualifiedName -> QualifiedName, PERIOD, Identifier
{ ((QualifiedName)ValueStack[ValueStack.Depth-3]).AddIdentifier(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 40: // DeclaratorName -> Identifier
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 41: // MethodDeclaratorName -> Identifier
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 42: // FieldVariableDeclaratorName -> Identifier
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 43: // LocalVariableDeclaratorName -> Identifier
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 44: // MethodBody -> Block
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 45: // ConstructorDeclaration -> Modifiers, MethodDeclarator, Block
{ CurrentSemanticValue = new ConstructorDeclaration(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 46: // StaticInitializer -> STATIC, Block
{ CurrentSemanticValue = new StaticInitializer(ValueStack[ValueStack.Depth-1]); }
        break;
      case 47: // Block -> LBRACE, LocalVariableDeclarationsAndStatements, RBRACE
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 48: // Block -> LBRACE, RBRACE
{ CurrentSemanticValue = new Block(); }
        break;
      case 49: // LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement
{ CurrentSemanticValue = new Block(ValueStack[ValueStack.Depth-1]); }
        break;
      case 50: // LocalVariableDeclarationsAndStatements -> 
               //                                           LocalVariableDeclarationsAndStatements, 
               //                                           LocalVariableDeclarationOrStatement
{ ((Block)ValueStack[ValueStack.Depth-2]).AddLocalVarDeclStmt(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 51: // LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 52: // LocalVariableDeclarationOrStatement -> Statement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 53: // LocalVariableDeclarationStatement -> TypeSpecifier, LocalVariableDeclarators, 
               //                                      SEMICOLON
{ CurrentSemanticValue = new LocalVariableDeclarationStatement(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 54: // LocalVariableDeclarationStatement -> StructDeclaration
{ CurrentSemanticValue = new LocalVariableDeclarationStatement(ValueStack[ValueStack.Depth-1]); }
        break;
      case 55: // LocalVariableDeclarators -> LocalVariableDeclaratorName
{ CurrentSemanticValue = new LocalVariableDeclarators(ValueStack[ValueStack.Depth-1]); }
        break;
      case 56: // LocalVariableDeclarators -> LocalVariableDeclarators, COMMA, 
               //                             LocalVariableDeclaratorName
{ ((LocalVariableDeclarators)ValueStack[ValueStack.Depth-3]).AddLocalVariableDeclaratorName(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 57: // Statement -> EmptyStatement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 58: // Statement -> ExpressionStatement, SEMICOLON
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 59: // Statement -> SelectionStatement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 60: // Statement -> IterationStatement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 61: // Statement -> ReturnStatement
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 62: // Statement -> Block
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 63: // EmptyStatement -> SEMICOLON
{ CurrentSemanticValue = new EmptyStatement( ); }
        break;
      case 64: // ExpressionStatement -> Expression
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 65: // SelectionStatement -> IF, LPAREN, Expression, RPAREN, Statement, ELSE, 
               //                       Statement
{ CurrentSemanticValue = new SelectionStatement(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 66: // SelectionStatement -> IF, LPAREN, Expression, RPAREN, Statement
{ CurrentSemanticValue = new SelectionStatement(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 67: // IterationStatement -> WHILE, LPAREN, Expression, RPAREN, Statement
{CurrentSemanticValue = new IterationStatement(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 68: // ReturnStatement -> RETURN, Expression, SEMICOLON
{ CurrentSemanticValue = new ReturnStatement(ValueStack[ValueStack.Depth-2]); }
        break;
      case 69: // ReturnStatement -> RETURN, SEMICOLON
{ CurrentSemanticValue = new ReturnStatement(); }
        break;
      case 70: // ArgumentList -> Expression
{ CurrentSemanticValue = new ArgumentList(ValueStack[ValueStack.Depth-1]); }
        break;
      case 71: // ArgumentList -> ArgumentList, COMMA, Expression
{ ((ArgumentList)ValueStack[ValueStack.Depth-3]).AddExpression(ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = ValueStack[ValueStack.Depth-3]; }
        break;
      case 72: // Expression -> QualifiedName, EQUALS, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.EQUALS, ValueStack[ValueStack.Depth-1]); }
        break;
      case 73: // Expression -> Expression, OP_LOR, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.OP_LOR, ValueStack[ValueStack.Depth-1]); }
        break;
      case 74: // Expression -> Expression, OP_LAND, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.OP_LAND, ValueStack[ValueStack.Depth-1]); }
        break;
      case 75: // Expression -> Expression, PIPE, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.PIPE, ValueStack[ValueStack.Depth-1]); }
        break;
      case 76: // Expression -> Expression, HAT, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.HAT, ValueStack[ValueStack.Depth-1]); }
        break;
      case 77: // Expression -> Expression, AND, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.AND, ValueStack[ValueStack.Depth-1]); }
        break;
      case 78: // Expression -> Expression, OP_EQ, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.OP_EQ, ValueStack[ValueStack.Depth-1]); }
        break;
      case 79: // Expression -> Expression, OP_NE, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.OP_NE, ValueStack[ValueStack.Depth-1]); }
        break;
      case 80: // Expression -> Expression, OP_GT, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.OP_GT, ValueStack[ValueStack.Depth-1]); }
        break;
      case 81: // Expression -> Expression, OP_LT, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.OP_LT, ValueStack[ValueStack.Depth-1]); }
        break;
      case 82: // Expression -> Expression, OP_LE, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.OP_LE, ValueStack[ValueStack.Depth-1]); }
        break;
      case 83: // Expression -> Expression, OP_GE, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.OP_GE, ValueStack[ValueStack.Depth-1]); }
        break;
      case 84: // Expression -> Expression, PLUSOP, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.PLUSOP, ValueStack[ValueStack.Depth-1]); }
        break;
      case 85: // Expression -> Expression, MINUSOP, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.MINUSOP, ValueStack[ValueStack.Depth-1]); }
        break;
      case 86: // Expression -> Expression, ASTERISK, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.ASTERISK, ValueStack[ValueStack.Depth-1]); }
        break;
      case 87: // Expression -> Expression, RSLASH, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.RSLASH, ValueStack[ValueStack.Depth-1]); }
        break;
      case 88: // Expression -> Expression, PERCENT, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-3], ExpressionEnums.PERCENT, ValueStack[ValueStack.Depth-1]); }
        break;
      case 89: // Expression -> ArithmeticUnaryOperator, Expression
{ CurrentSemanticValue = new Expression(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1], yytext, ExpressionEnums.UNARY); }
        break;
      case 90: // Expression -> PrimaryExpression
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 91: // ArithmeticUnaryOperator -> PLUSOP
{ CurrentSemanticValue = new ArithmeticUnaryOperator(ExpressionEnums.PLUSOP); }
        break;
      case 92: // ArithmeticUnaryOperator -> MINUSOP
{ CurrentSemanticValue = new ArithmeticUnaryOperator(ExpressionEnums.PLUSOP); }
        break;
      case 93: // PrimaryExpression -> QualifiedName
{ CurrentSemanticValue = new PrimaryExpression(ValueStack[ValueStack.Depth-1]); }
        break;
      case 94: // PrimaryExpression -> NotJustName
{ CurrentSemanticValue = new PrimaryExpression(ValueStack[ValueStack.Depth-1]); }
        break;
      case 95: // NotJustName -> SpecialName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 96: // NotJustName -> ComplexPrimary
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 97: // ComplexPrimary -> LPAREN, Expression, RPAREN
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 98: // ComplexPrimary -> ComplexPrimaryNoParenthesis
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 99: // ComplexPrimaryNoParenthesis -> LITERAL
{ CurrentSemanticValue = new Literal(yystringval); }
        break;
      case 100: // ComplexPrimaryNoParenthesis -> Number
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 101: // ComplexPrimaryNoParenthesis -> FieldAccess
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 102: // ComplexPrimaryNoParenthesis -> MethodCall
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 103: // FieldAccess -> NotJustName, PERIOD, Identifier
{ CurrentSemanticValue = new FieldAccess(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 104: // MethodCall -> MethodReference, LPAREN, ArgumentList, RPAREN
{ CurrentSemanticValue = new MethodCall(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 105: // MethodCall -> MethodReference, LPAREN, RPAREN
{ CurrentSemanticValue = new MethodCall(ValueStack[ValueStack.Depth-3]); }
        break;
      case 106: // MethodReference -> ComplexPrimaryNoParenthesis
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 107: // MethodReference -> QualifiedName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 108: // MethodReference -> SpecialName
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 109: // SpecialName -> THIS
{ CurrentSemanticValue = new SpecialName(SpecialNameEnums.THIS); }
        break;
      case 110: // SpecialName -> NULL
{ CurrentSemanticValue = new SpecialName(SpecialNameEnums.NULL); }
        break;
      case 111: // Identifier -> IDENTIFIER
{  CurrentSemanticValue = new Identifier(yytext); }
        break;
      case 112: // Number -> INT_NUMBER
{ CurrentSemanticValue = new Number(yytext); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

public string yytext
{
	get { return((TCCLScanner)Scanner).yytext; }
}

public string yystringval
{
	get { return((TCCLScanner)Scanner).yystringval; }
}
}
}
